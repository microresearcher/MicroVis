'[- +=!@#$%^&*()]','_')
}
assign(paste0(data_name,'_ds'),list(metadata=metadata,
data=fxnldata,
features=data_name),-1)
add_ds_list[[data_name]] <- paste0(data_name,'_ds')
do_fxnl <- T
}
}
if(!exists('taxadata') & !exists('fxnldata')) {
# If neither taxonomic nor functional data could be loaded, then exit
return(cat('\n!!!\nERROR: No valid taxonomy or functional abundance data found! Exiting\n!!!'))
}
if(do_taxa) {
taxa_ds <- chooseFactors(taxa_ds)
taxa_ds <- orderGroups(taxa_ds)
taxa_ds <- removeLowQuality(taxa_ds)
taxa_ds <- processDataset(taxa_ds, silent = T)
taxa_ds$results_path <- file.path(get('project_dir',envir = mvEnv),'Taxonomic Analysis')
}
if(do_fxnl) {
for(ds in add_ds_list) {
fxnl_ds <- get(ds)
if(do_taxa) {
fxnl_ds$metadata <- taxa_ds$metadata
fxnl_ds$factors <- taxa_ds$factors
fxnl_ds$active_factor <- taxa_ds$active_factor
fxnl_ds$colors <- taxa_ds$colors
} else if(grep(ds,add_ds_list)>1) {
fxnl_ds$metadata <- get(add_ds_list[[1]])$metadata
fxnl_ds$factors <- get(add_ds_list[[1]])$factors
fxnl_ds$active_factor <- get(add_ds_list[[1]])$active_factor
fxnl_ds$colors <- get(add_ds_list[[1]])$colors
} else {
fxnl_ds <- chooseFactors(fxnl_ds)
fxnl_ds <- orderGroups(fxnl_ds)
}
fxnl_ds <- processDataset(fxnl_ds, silent = T)
fxnl_ds$results_path <- file.path(get('project_dir',envir = mvEnv),
paste0(capitalize(fxnl_ds$features),' Analysis'))
assign(ds,fxnl_ds,-1)
}
}
if(do_taxa | do_fxnl) cat('\n\n>>>  DATA LOADED SUCCESSFULLY!  <<<\n')
if(do_taxa) {
assign('taxa_raw',taxa_ds,envir = mvEnv)
if(autoProcess) {
taxa_ds <- scaleSamples(taxa_ds, scaling = 'sum', silent = T)
taxa_ds <- transData(taxa_ds, transform_method = 'glog', silent = T)
taxa_ds <- filterLowPrev(taxa_ds, silent = T)
taxa_ds <- filterLowRelAbun(taxa_ds, silent = T)
taxa_ds <- filterNAs(taxa_ds,ranks = 'domain',silent = T)
taxa_ds <- processDataset(taxa_ds,temp = T)
assign('taxa_proc',taxa_ds,envir = mvEnv)
}
assign('active_dataset',taxa_ds,envir = mvEnv)
print(taxa_ds)
}
if(do_fxnl) {
for(ds in add_ds_list) {
fxnl_ds <- get(ds,inherits = F)
assign(paste0(fxnl_ds$features,'_raw'),fxnl_ds,envir = mvEnv)
if(autoProcess) {
fxnl_ds <- filterLowPrev(fxnl_ds, silent = T)
fxnl_ds <- filterLowRelAbun(fxnl_ds, silent = T)
fxnl_ds <- scaleSamples(fxnl_ds, scaling = 'sum', silent = T)
fxnl_ds <- processDataset(fxnl_ds,temp = T)
assign(paste0(fxnl_ds$features,'_proc'),fxnl_ds,envir = mvEnv)
print(fxnl_ds)
}
}
if(!do_taxa) {
if(autoProcess) {
assign('active_dataset',
get(paste0(sub('_([^_]*)$','',add_ds_list[[1]]),'_proc'),inherits = F),
envir = mvEnv)
print(get(paste0(sub('_([^_]*)$','',add_ds_list[[1]]),'_proc'),inherits = F))
} else {
assign('active_dataset',
get(paste0(sub('_([^_]*)$','',add_ds_list[[1]]),'_raw'),inherits = F),
envir = mvEnv)
print(get(paste0(sub('_([^_]*)$','',add_ds_list[[1]]),'_raw'),inherits = F))
}
}
}
if(do_taxa) cat('\nRaw taxonomy dataset is stored in "taxa_raw"')
if(do_fxnl) for(ds in add_ds_list) cat(paste0('\nRaw functional dataset is stored in "',
sub('_([^_]*)$','',ds),'_raw"'))
if(autoProcess) {
if(do_taxa) cat('\nAuto-processed taxonomy dataset is stored in "taxa_proc"')
if(do_fxnl) for(ds in add_ds_list) cat(paste0('\nAuto-processed functional dataset is stored in "',
sub('_([^_]*)$','',ds),'_proc"'))
if(do_taxa) cat('\n\n  <|> Active Dataset: "taxa_proc" <|>\n\n')
else if(do_fxnl) cat(paste0('\n\n  <|> Active Dataset: "',
sub('_([^_]*)$','',add_ds_list[[1]]),'_proc" <|>\n\n'))
} else {
if(do_taxa) cat('\n\n  <|> Active Dataset: "taxa_raw" <|>\n\n')
else if(do_fxnl) cat('\n\n  <|> Active Dataset: "fxnl_raw" <|>\n\n')
}
assign('.loading',F,envir = mvEnv)
return(cat('\nType "mvhelp()" then press Enter to see the available functions!\n\n'))
}
devtools::document()
devtools::document()
`rm(list = c("mvload"))`
rm(list = c("mvload"))
devtools::document()
library(MicroVis)
devtools::document()
devtools::document()
devtools::document()
mvload()
devtools::document()
mvload()
library(MicroVis)
devtools::document()
library(MicroVis)
mvload()
library(MicroVis)
mvload()
library(MicroVis)
mvload()
library(MicroVis)
mvload()
library(MicroVis)
mvload()
library(MicroVis)
mvload()
library(MicroVis)
mvload()
library(MicroVis)
mvload()
plotRareCurves()
library(MicroVis)
mvload()
plotSampleDensity()
plotFeatureDensity()
plotRareCurves()
filterLowAbun(min_proportion = 30)
filterLowAbun(min_abun = 0,min_proportion = 30)
filterLowAbun(min_abun = 1,min_proportion = 30)
getdata()
dataset <- get('active_dataset',envir = mvEnv)
get('active_dataset',envir = mvEnv)
dataset <- get('active_dataset',envir = 'mvEnv')
mvsave()
test <- mvsave()
test
dataset <- test
if(!is.null(dataset$data$proc$rarefied)) return(dataset)
if(is.null(dataset$data$proc$unranked)) dataset <- runNormalization(dataset, silent = T)
if(is.null(dataset$data$proc$filtering$filter_rank)) {
dataset$data$proc$filtering$filter_rank <- getLowestRank(dataset)
}
library(MicroVis)
mvload()
filterLowPrev(min_prevalence = 10)
filterLowPrev(min_prevalence = 1)
filterLowAbun()
getFtStats()
test <- getFtStats()
View(test)
View(test$proc$filtering$ftstats)
filterLowAbun()
test$proc$filtering
#'
#' @param dataset MicroVis dataset (mvdata object)
#' @param temp This parameter has no use in this function and can be removed
#' @param silent Argument that is ultimately passed onto runSampleFilter(),
#'     runNormalization(), and runFeatureFilter(), telling them not to output
#'     any messages.
#'
#' @return MicroVis dataset (mvdata object) with features filtered out based on
#'     parameters set by the filter___ feature filtering functions
#'
runFeatureFilter <- function(dataset=NULL, temp=F, silent=F) {
if(is.null(dataset)) {
dataset <- get('active_dataset',envir = mvEnv)
dataset_name <- 'active_dataset'
} else {
dataset_name <- deparse(substitute(dataset))
}
if(!is.null(dataset$data$proc$rarefied)) return(dataset)
if(is.null(dataset$data$proc$unranked)) dataset <- runNormalization(dataset, silent = T)
if(is.null(dataset$data$proc$filtering$filter_rank)) {
dataset$data$proc$filtering$filter_rank <- getLowestRank(dataset)
}
filtering <- dataset$data$proc$filtering
# If there is something in the dataset's filtering history besides
#   "filterlist" and "ftstats", proceed with filtering
if(length(names(filtering)[!(names(filtering) %in% c('filterlist','ftstats','filter_rank'))])) {
if(!silent) cat('\n\n|~~~~~~~~~~~~~  FILTERING FEATURES  ~~~~~~~~~~~~~|\n')
filter_rank <- filtering$filter_rank
# Get stats for the features using the raw counts but only with the desired
#   set of samples
ft_data <- getFtStats(runSampleFilter(dataset,temp=T,silent=T))
abd_temp <- ft_data$proc$unranked
if(dataset$features=='taxa') abd_temp <- agglomTaxa(ft_data, abd_temp,
from_rank='asv',
to_rank=filter_rank)
nfts <- nrow(ft_data$proc$filtering$ftstats)
filterlist <- list()
ftstats <- filtering$ftstats
### Identify Low Prevalence ###
#-----------------------------#
if(!is.null(filtering$top_prevalence)) {
low_prevalence <- (ftstats %>% slice_min(Prevalence,
n=(nfts-filtering$top_prevalence)))[['Feature']]
if(!silent) cat(paste0('\n  Identified top ',
filtering$top_prevalence,' features by prevalence'))
filterlist$low_prevalence <- low_prevalence
} else if(!is.null(filtering$min_prevalence)) {
low_prevalence <- ftstats[ftstats$Prevalence<filtering$min_prevalence,]$Feature
if(!silent) cat(paste0('\n  Identified ',
length(low_prevalence),' features with < ',
filtering$min_prevalence,' prevalence'))
filterlist$low_prevalence <- low_prevalence
}
### Identify Low Relative Abundance ###
#-------------------------------------#
if(!is.null(filtering$top_relabun)) {
low_relabun <- (ftstats %>% slice_min(Relative_Abundance,
n=(nfts-filtering$top_relabun)))[['Feature']]
if(!silent) cat(paste0('\n  Identified top ',
filtering$top_relabun,' features by relative abundance'))
filterlist$low_relabun <- low_relabun
} else if(!is.null(filtering$min_relabun)) {
low_relabun <- ftstats[ftstats$Relative_Abundance<filtering$min_relabun,]$Feature
if(!silent) cat(paste0('\n  Identified ',
length(low_relabun),' features with < ',
filtering$min_relabun,' relative abundance'))
filterlist$low_relabun <- low_relabun
}
### Identify Low Total Abundance ###
#----------------------------------#
if(!is.null(filtering$top_totabun)) {
low_totabun <- (ftstats %>% slice_min(Total_Abundance,
n=(nfts-filtering$top_totabun)))[['Feature']]
if(!silent) cat(paste0('\n  Identified top ',
filtering$top_totabun,' features by total abundance'))
filterlist$low_totabun <- low_totabun
} else if(!is.null(filtering$min_totabun)) {
low_totabun <- ftstats[ftstats$Total_Abundance<filtering$min_totabun,]$Feature
if(!silent) cat(paste0('\n  Identified ',
length(low_totabun),' features with < ',
filtering$min_totabun,' total abundance'))
filterlist$low_totabun <- low_totabun
}
### Identify Low Variance ###
#---------------------------#
if(!is.null(filtering$top_var)) {
low_var <- (ftstats %>% slice_min(StDev, n=(nfts-filtering$top_var)))[['Feature']]
if(!silent) cat(paste0('\n  Identified the top ',
filtering$top_var,' features by standard deviation'))
filterlist$low_var <- low_var
} else if(!is.null(filtering$low_var_percentile)) {
low_sd <- slice_min(data.frame(sd=unique(ftstats$StDev)),
sd, n=floor(filtering$low_var_percentile*nrow(ftstats)/100))$sd
low_var <- ftstats[ftstats$StDev %in% low_sd,]$Feature
if(!silent) cat(paste0('\n  Identified ',
length(low_var),' features with variance in the bottom ',
filtering$low_var_percentile,' percentile by standard deviation'))
filterlist$low_variance <- low_var
}
### Identify Low Abundance ###
#----------------------------#
if(!is.null(filtering$low_abun$min_abun) & !is.null(filtering$low_abun$min_prop)) {
ftstats$LowAbunProp=apply(abd_temp, 2,
function(x) sum(x<filtering$low_abun$min_abun)/nrow(abd_temp))
low_abun <- ftstats[ftstats$LowAbunProp>(1-filtering$low_abun$min_prop/100)]$Feature
if(get('keepSigFisher',envir = mvDefaults)) {
low_abun <- low_abun[!(low_abun %in% findSigFisher(dataset,low_abun,silent=silent))]
}
if(!silent) cat(paste0('\n  Identified ',
length(low_abun),' features with < ',
filtering$low_abun$min_abun,' abundance in >',
filtering$low_abun$min_prop,'% of samples'))
filterlist$low_abun <- low_abun
}
taxaranks <- c('species','genus','family','order','class','phylum','single_rank','pathways')
lowest_rank <- taxaranks[taxaranks %in% names(ft_data$proc)][[1]]
### Identify Taxa with NAs ###
#----------------------------#
# If keepNA exists and is false, identify NAs at the active rank
taxa_names_tab <- ft_data$taxa_names
active_rank <- ft_data$proc$active_rank
if(!is.null(filtering$NAfilter$ranks)) {
if(!is.null(taxa_names_tab)) {
filterNA.ranks <- paste0(paste0(substr(filtering$NAfilter$ranks,1,1),'__'),collapse = '|')
filterlist$NAs <- unique(taxa_names_tab[grep('unidentified',taxa_names_tab[[active_rank]]),][[lowest_rank]],
taxa_names_tab[grep('__',taxa_names_tab[[active_rank]]),][[lowest_rank]])
}
if(!silent) cat(paste0('\n  Identified ',length(filterlist$NAs),' features without assigned ',paste0(filtering$NAfilter$ranks,collapse = ', ')))
}
# Reload the normalized ft_data and abundance table
ft_data <- dataset$data
abd_temp <- ft_data$proc$unranked
if(length(unlist(filterlist))) {
### Filter all Identified Features ###
#------------------------------------#
# Replace the taxa names with all ASV numbers corresponding to them
if(!is.null(taxa_names_tab)) {
filterlist.ids <- TaxatoASV(ft_data, unique(unlist(filterlist)), filter_rank)
} else filterlist.ids <- unique(unlist(filterlist))
# Make a new abundance table of just the features that made it through
#   the filter
abd_filtered <- abd_temp[!(colnames(abd_temp) %in% filterlist.ids)]
# Now, pool all the filter list features into 'Other' and add it to the table
abd_filtered$Other <- rowSums(abd_temp[filterlist.ids])
} else abd_filtered <- abd_temp
# Record the filter list in the dataset's history
ft_data$proc$filtering$filterlist <- filterlist
num_removed <- ncol(abd_temp) - ncol(abd_filtered) + any(colnames(abd_filtered) %in% 'Other')
if(!silent) cat('\n\n>>> Removed',num_removed,'features based on filtering parameters <<<\n')
} else {
ft_data <- dataset$data
if(!silent) cat('\n~~~ No feature filtering performed ~~~\n')
}
ft_data <- makeRankTabs(ft_data)
# No need for the unranked table anymore, as all downstream data manipulation
#   (i.e. normalization methods) will be performed separately on each ranked
#   abundance table
ft_data$proc$unranked <- NULL
dataset$data <- ft_data
return(dataset)
}
filterLowAbun()
#'
#' @param dataset MicroVis dataset (mvdata object)
#' @param temp This parameter has no use in this function and can be removed
#' @param silent Argument that is ultimately passed onto runSampleFilter(),
#'     runNormalization(), and runFeatureFilter(), telling them not to output
#'     any messages.
#'
#' @return MicroVis dataset (mvdata object) with features filtered out based on
#'     parameters set by the filter___ feature filtering functions
#'
runFeatureFilter <- function(dataset=NULL, temp=F, silent=F) {
if(is.null(dataset)) {
dataset <- get('active_dataset',envir = mvEnv)
dataset_name <- 'active_dataset'
} else {
dataset_name <- deparse(substitute(dataset))
}
if(!is.null(dataset$data$proc$rarefied)) return(dataset)
if(is.null(dataset$data$proc$unranked)) dataset <- runNormalization(dataset, silent = T)
if(is.null(dataset$data$proc$filtering$filter_rank)) {
dataset$data$proc$filtering$filter_rank <- getLowestRank(dataset)
}
filtering <- dataset$data$proc$filtering
# If there is something in the dataset's filtering history besides
#   "filterlist" and "ftstats", proceed with filtering
if(length(names(filtering)[!(names(filtering) %in% c('filterlist','ftstats','filter_rank'))])) {
if(!silent) cat('\n\n|~~~~~~~~~~~~~  FILTERING FEATURES  ~~~~~~~~~~~~~|\n')
filter_rank <- filtering$filter_rank
# Get stats for the features using the raw counts but only with the desired
#   set of samples
ft_data <- getFtStats(runSampleFilter(dataset,temp=T,silent=T))
abd_temp <- ft_data$proc$unranked
if(dataset$features=='taxa') abd_temp <- agglomTaxa(ft_data, abd_temp,
from_rank='asv',
to_rank=filter_rank)
nfts <- nrow(ft_data$proc$filtering$ftstats)
filterlist <- list()
ftstats <- filtering$ftstats
### Identify Low Prevalence ###
#-----------------------------#
if(!is.null(filtering$top_prevalence)) {
low_prevalence <- (ftstats %>% slice_min(Prevalence,
n=(nfts-filtering$top_prevalence)))[['Feature']]
if(!silent) cat(paste0('\n  Identified top ',
filtering$top_prevalence,' features by prevalence'))
filterlist$low_prevalence <- low_prevalence
} else if(!is.null(filtering$min_prevalence)) {
low_prevalence <- ftstats[ftstats$Prevalence<filtering$min_prevalence,]$Feature
if(!silent) cat(paste0('\n  Identified ',
length(low_prevalence),' features with < ',
filtering$min_prevalence,' prevalence'))
filterlist$low_prevalence <- low_prevalence
}
### Identify Low Relative Abundance ###
#-------------------------------------#
if(!is.null(filtering$top_relabun)) {
low_relabun <- (ftstats %>% slice_min(Relative_Abundance,
n=(nfts-filtering$top_relabun)))[['Feature']]
if(!silent) cat(paste0('\n  Identified top ',
filtering$top_relabun,' features by relative abundance'))
filterlist$low_relabun <- low_relabun
} else if(!is.null(filtering$min_relabun)) {
low_relabun <- ftstats[ftstats$Relative_Abundance<filtering$min_relabun,]$Feature
if(!silent) cat(paste0('\n  Identified ',
length(low_relabun),' features with < ',
filtering$min_relabun,' relative abundance'))
filterlist$low_relabun <- low_relabun
}
### Identify Low Total Abundance ###
#----------------------------------#
if(!is.null(filtering$top_totabun)) {
low_totabun <- (ftstats %>% slice_min(Total_Abundance,
n=(nfts-filtering$top_totabun)))[['Feature']]
if(!silent) cat(paste0('\n  Identified top ',
filtering$top_totabun,' features by total abundance'))
filterlist$low_totabun <- low_totabun
} else if(!is.null(filtering$min_totabun)) {
low_totabun <- ftstats[ftstats$Total_Abundance<filtering$min_totabun,]$Feature
if(!silent) cat(paste0('\n  Identified ',
length(low_totabun),' features with < ',
filtering$min_totabun,' total abundance'))
filterlist$low_totabun <- low_totabun
}
### Identify Low Variance ###
#---------------------------#
if(!is.null(filtering$top_var)) {
low_var <- (ftstats %>% slice_min(StDev, n=(nfts-filtering$top_var)))[['Feature']]
if(!silent) cat(paste0('\n  Identified the top ',
filtering$top_var,' features by standard deviation'))
filterlist$low_var <- low_var
} else if(!is.null(filtering$low_var_percentile)) {
low_sd <- slice_min(data.frame(sd=unique(ftstats$StDev)),
sd, n=floor(filtering$low_var_percentile*nrow(ftstats)/100))$sd
low_var <- ftstats[ftstats$StDev %in% low_sd,]$Feature
if(!silent) cat(paste0('\n  Identified ',
length(low_var),' features with variance in the bottom ',
filtering$low_var_percentile,' percentile by standard deviation'))
filterlist$low_variance <- low_var
}
### Identify Low Abundance ###
#----------------------------#
if(!is.null(filtering$low_abun$min_abun) & !is.null(filtering$low_abun$min_prop)) {
ftstats$LowAbunProp=apply(abd_temp, 2,
function(x) sum(x<filtering$low_abun$min_abun)/nrow(abd_temp))
low_abun <- ftstats[ftstats$LowAbunProp>(1-filtering$low_abun$min_prop/100)]$Feature
if(get('keepSigFisher',envir = mvDefaults)) {
low_abun <- low_abun[!(low_abun %in% findSigFisher(dataset,low_abun,silent=silent))]
}
if(!silent) cat(paste0('\n  Identified ',
length(low_abun),' features with < ',
filtering$low_abun$min_abun,' abundance in >',
filtering$low_abun$min_prop,'% of samples'))
filterlist$low_abun <- low_abun
}
taxaranks <- c('species','genus','family','order','class','phylum','single_rank','pathways')
lowest_rank <- taxaranks[taxaranks %in% names(ft_data$proc)][[1]]
### Identify Taxa with NAs ###
#----------------------------#
# If keepNA exists and is false, identify NAs at the active rank
taxa_names_tab <- ft_data$taxa_names
active_rank <- ft_data$proc$active_rank
if(!is.null(filtering$NAfilter$ranks)) {
if(!is.null(taxa_names_tab)) {
filterNA.ranks <- paste0(paste0(substr(filtering$NAfilter$ranks,1,1),'__'),collapse = '|')
filterlist$NAs <- unique(taxa_names_tab[grep('unidentified',taxa_names_tab[[active_rank]]),][[lowest_rank]],
taxa_names_tab[grep('__',taxa_names_tab[[active_rank]]),][[lowest_rank]])
}
if(!silent) cat(paste0('\n  Identified ',length(filterlist$NAs),' features without assigned ',paste0(filtering$NAfilter$ranks,collapse = ', ')))
}
# Reload the normalized ft_data and abundance table
ft_data <- dataset$data
abd_temp <- ft_data$proc$unranked
if(length(unlist(filterlist))) {
### Filter all Identified Features ###
#------------------------------------#
# Replace the taxa names with all ASV numbers corresponding to them
if(!is.null(taxa_names_tab)) {
filterlist.ids <- TaxatoASV(ft_data, unique(unlist(filterlist)), filter_rank)
} else filterlist.ids <- unique(unlist(filterlist))
# Make a new abundance table of just the features that made it through
#   the filter
abd_filtered <- abd_temp[!(colnames(abd_temp) %in% filterlist.ids)]
# Now, pool all the filter list features into 'Other' and add it to the table
abd_filtered$Other <- rowSums(abd_temp[filterlist.ids])
} else abd_filtered <- abd_temp
# Record the filter list in the dataset's history
ft_data$proc$filtering$filterlist <- filterlist
num_removed <- ncol(abd_temp) - ncol(abd_filtered) + any(colnames(abd_filtered) %in% 'Other')
if(!silent) cat('\n\n>>> Removed',num_removed,'features based on filtering parameters <<<\n')
} else {
ft_data <- dataset$data
if(!silent) cat('\n~~~ No feature filtering performed ~~~\n')
}
ft_data <- makeRankTabs(ft_data)
# No need for the unranked table anymore, as all downstream data manipulation
#   (i.e. normalization methods) will be performed separately on each ranked
#   abundance table
ft_data$proc$unranked <- NULL
dataset$data <- ft_data
return(dataset)
}
library(MicroVis)
filterLowAbun()
mvload()
filterLowAbun()
library(MicroVis)
mvload()
filterLowAbun()
filterLowAbun(min_proportion = 50)
library(MicroVis)
mvload()
get('active_dataset',envir = mvEnv)
get('active_dataset',envir = 'mvEnv')
test <- mvsave()
test
View(test)
test2 <- getFtStats(test)
test2$proc$filtering$ftstats
View(test2$proc$filtering$ftstats)
View(test2$proc$filtering$filterlist$low_prevalence)
View(test$data$proc)
library(MicroVis)
library(MicroVis)
mvload()
plotRareCurves()
